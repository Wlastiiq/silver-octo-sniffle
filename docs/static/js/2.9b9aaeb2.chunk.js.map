{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getControllerValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/useWatch.ts","../../src/utils/objectHasFunction.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","e","_e","f","TypeError","normalCompletion","didErr","step","next","_e2","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","formStateData","omit","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","props","_props","subscription","disabled","subject","subscribe","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","useWatch","methods","control","_name","_subjects","shouldSubscribeByName","fieldValues","generateWatchOutput","values","_formValues","updateValue","isFunction","objectHasFunction","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_defaultValues","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","shouldRenderFormState","state","getProxyFormState","useFormState","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","keepDefaultValue","onChange","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","isBlurEvent","has","watchName","slice","cloneObject","Set","createSubject","_observers","observer","push","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isSubmitted","reValidateMode","RegExp","getValidateError","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","live","getValues","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","all","shouldFocus","clearErrors","inputName","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"mappings":"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","file":"static/js/2.9b9aaeb2.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (value) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}